/*
 * Copyright (c) 2014, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "25.0.3"

    signingConfigs {
        config {
            keyAlias 'platform'
            keyPassword 'android'
            storeFile file('../../swordfish.keystore')
            storePassword 'android'
        }
    }

    defaultConfig {
        applicationId "org.wso2.iot.system.service"
        minSdkVersion 22
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            debuggable true
            signingConfig signingConfigs.config
            versionNameSuffix getAppName()
            copyReleaseApk(applicationVariants)
        }
    }

    lintOptions {
        abortOnError false
    }


}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}

def copyReleaseApk(applicationVariants) {
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def releasePath = "${rootDir}/../targets"
            output.outputFile = new File(releasePath, output.outputFile.name.replace("app", getAppFileName()))
            println("APK new path " + output.outputFile)
        }
    }
}

def getAppName() {
    def branch = (getWorkingBranch() == "release") ? "" : "-2.7"
    return "-" + name + branch + "-b" + getDate()
}

def getAppFileName() {
    def branch = (getWorkingBranch() == "release") ? "" : "-2.7"
    return "mdm-system-service" + branch + "." + getPatchVersion() + "." + getSha1()
}

def getWorkingBranch() {
    // Triple double-quotes for the breaklines
    def workingBranch = """git --git-dir=${rootDir}/../.git
                               --work-tree=${rootDir}/..
                               rev-parse --abbrev-ref HEAD""".execute().text.trim()
    print "Working branch: " + workingBranch + "\n"
    return workingBranch
}

repositories{
    flatDir{
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile(name:'DeveloperSDK-release', ext:'aar')
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
}

def getSha1() {
	def gitCommit = System.getenv("GIT_COMMIT")
	if (gitCommit != null) {
        if (gitCommit.length() > 8) {
            return gitCommit.substring(0, 8)
        } else {
            return gitCommit
        }
		}
} 

def getPatchVersion() {
	def Properties props = new Properties()
    def propFile = new File("build.properties")
    if (propFile.canRead()) {
        props.load(new FileInputStream(propFile))
    } else {
        return System.getenv("BUILD_NUMBER")
    }
    int value = props["APP_VERSION"].toInteger()
    return value
        
}
